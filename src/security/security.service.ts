import { Injectable, InternalServerErrorException } from '@nestjs/common';
import * as argon2 from 'argon2';
import crypto from 'crypto';

@Injectable()
export class SecurityService {
  private readonly argon2Options: argon2.Options & { raw: false } = {
    type: argon2.argon2i,
    memoryCost: 65536,
    saltLength: 16,
    hashLength: 32,
    parallelism: 1,
    timeCost: 3,
    raw: false,
  };

  async generatePasswordHash(password: string) {
    try {
      const hash = await argon2.hash(password, this.argon2Options);
      return hash;
    } catch (err) {
      // FIXME: use nest logger
      console.error('Failed to generate password hash! err = ' + err);
      throw new InternalServerErrorException();
    }
  }

  async verifyPasswordHash(hash: string, password: string) {
    try {
      return await argon2.verify(hash, password, this.argon2Options);
    } catch (err) {
      // FIXME: use nest logger
      console.error('Failed to verify password hash! err = ' + err);
      throw new InternalServerErrorException();
    }
  }

  /**
   * Generates cryptographically secure token with given number of bytes and encodes it to url safe base 64
   * @param length Number of generated bytes
   */
  generateSecureRandomToken(length?: number) {
    return crypto
      .randomBytes(length || 32)
      .toString('base64')
      .replace(/\//g, '_')
      .replace(/\+/g, '-');
  }
}
